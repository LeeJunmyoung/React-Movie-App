{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","image","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","beforeMovies","_getMovies","_callee","page","movies","viewMovies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","concat","abrupt","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","medium_cover_image","react_infinite_scroller_default","pageStart","loadMore","bind","hasMore","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yUAgCA,SAASA,EAATC,GAAiC,IAAXC,EAAWD,EAAXC,MAAMC,EAAKF,EAALE,IACxB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAOC,IAAKA,EAAKK,UAAU,kBAK7C,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,EAAhC,KAkDOC,MAtFf,SAAAC,GAA6C,IAA7BC,EAA6BD,EAA7BC,MAAMZ,EAAuBW,EAAvBX,MAAMa,EAAiBF,EAAjBE,OAAOC,EAAUH,EAAVG,SAC/B,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,MAAOA,EAAOC,IAAKW,KAEpCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACVO,EAAOE,IAAK,SAACN,EAAMO,GAAP,OAAgBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEhEd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAEXJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,QACTC,WAAS,EACTC,QAAQ,gCC4EjBC,6MAxFbC,MAAM,CACJC,aAAa,MAedC,iDAAa,SAAAC,EAAMC,GAAN,IAAAC,EAAAJ,EAAAK,EAAA,OAAAC,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAESC,EAAKC,SAAST,GAFvB,cAENC,EAFMI,EAAAK,KAGNb,EAAcW,EAAKZ,MAAMK,OAI/BC,EADGF,EAAK,EACK,GAAGW,OAAOd,GAAcc,OAAOV,GAE/BA,EATDI,EAAAO,OAAA,SAWLJ,EAAKK,SAAS,CACnBZ,OAASC,EACTF,KAAOA,KAbG,wBAAAK,EAAAS,SAAAf,EAAAgB,iEAkBdN,SAAS,SAACT,GACR,OAAOgB,MAAM,sEAAsEhB,GAClFiB,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SAEzBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKnB,SACvBoB,MAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,QAkB1BG,cAAc,WAWZ,OAVejB,EAAKZ,MAAMK,OAAOf,IAAK,SAACwC,EAAMvC,GAEvC,OAAOd,EAAAC,EAAAC,cAACoD,EAAD,CACO5C,MAAO2C,EAAM3C,MACbZ,MAAOuD,EAAME,mBACbxC,IAAKD,EACLH,OAAQ0C,EAAM1C,OACdC,SAAUyC,EAAMzC,+IArDpC8B,KAAKjB,WAAW,oCA2DT,IACCG,EAAUc,KAAKnB,MAAfK,OACR,OACE5B,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CACEwD,UAAW,EACXC,SAAUhB,KAAKjB,WAAWkC,KAAKjB,MAC/BkB,SAAS,GAGX5D,EAAAC,EAAAC,cAAA,OAAKE,UAAWwB,EAAS,MAAM,gBAC5BA,EAASc,KAAKU,gBAAgB,mBApFrBS,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.e16d7e26.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nfunction Movie({title,image,genres,synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster image={image} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genes\">\r\n                    {genres.map( (genre,index)=> <MovieGenre genre={genre} key={index} /> )}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    \r\n                    <LinesEllipsis \r\n                        text={synopsis}\r\n                        maxLine=\"5\"\r\n                        ellipsis=' ....'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction MoviePoster({image,alt}){\r\n    return(\r\n        <img src={image} alt={alt} className=\"Movie__Poster\" />\r\n    )\r\n    \r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie__genre\">{genre} </span>\r\n    )\r\n}\r\n\r\n\r\nMoviePoster.propTypes ={\r\n    image :  PropTypes.string.isRequired\r\n}\r\n Movie.propTypes ={\r\n    title :  PropTypes.string.isRequired,\r\n    image :  PropTypes.string.isRequired,\r\n    synopsis:PropTypes.string.isRequired\r\n}\r\n\r\n\r\n\r\n// class Movie extends Component{\r\n    \r\n//     static propTypes ={\r\n//         title : PropTypes.string.isRequired,\r\n//         image : PropTypes.string.isRequired\r\n//     }\r\n\r\n\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//             <MoviePoster image={this.props.image}/>\r\n//             <h1>{this.props.title}</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component{\r\n\r\n//     static propTypes={\r\n//         image :PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n           \r\n//             <img src={this.props.image} alt=\"Movie Poster\" />\r\n            \r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\n\n\nclass App extends Component {\n\n  \n  state={\n    beforeMovies:[]\n    \n  }\n\n  componentWillMount(){\n   //console.log('will mount first') ;\n   //window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n  \n  componentDidMount(){\n    //console.log('did mount third');\n    this._getMovies(1);\n    //window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n   _getMovies = async(page) => {\n    \n    const movies = await this._callApi(page);\n    const beforeMovies= this.state.movies;\n    //const page = parseInt(this.state.page)+1;\n    let viewMovies\n    if(page>1)\n    viewMovies = [].concat(beforeMovies).concat(movies);\n    else\n    viewMovies = movies;\n    \n    return this.setState({\n      movies : viewMovies,\n      page : page\n    });\n\n  }\n  \n  _callApi=(page)=>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count&page='+page)\n    .then(response=> response.json())\n    //.then(json => console.log(json))\n    .then(json => json.data.movies)\n    .catch(err=>console.log(err))\n  }\n\n  // handleScroll = () => {\n  //   const { innerHeight } = window;\n  //   const { scrollHeight } = document.body;\n  //   // IE에서는 document.documentElement 를 사용.\n  //   const scrollTop =\n  //     (document.documentElement && document.documentElement.scrollTop) ||\n  //     document.body.scrollTop;\n  //   // 스크롤링 했을때, 브라우저의 가장 밑에서 100정도 높이가 남았을때에 실행하기위함.\n  //   if (scrollHeight - innerHeight - scrollTop < 1) {\n  //     this._getMovies();\n  //   }\n  // };\n\n\n\n  _renderMovies=()=>{\n    const movies = this.state.movies.map( (movie,index) => {\n      //console.log(movie);\n          return <Movie \n                        title={movie.title} \n                        image={movie.medium_cover_image} \n                        key={index} \n                        genres={movie.genres}\n                        synopsis={movie.synopsis}\n                 />\n    });\n    return movies;    \n  }\n\n  render() {\n    const { movies }= this.state;\n    return (\n      <InfiniteScroll\n        pageStart={1}\n        loadMore={this._getMovies.bind(this)}\n        hasMore={true || false}\n      \n    >\n      <div className={movies ? \"App\":'App--loading' }>\n        {movies ? this._renderMovies():'Loading' }\n      </div>\n      </InfiniteScroll>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}